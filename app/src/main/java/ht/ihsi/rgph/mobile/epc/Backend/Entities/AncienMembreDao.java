package ht.ihsi.rgph.mobile.epc.Backend.Entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.mobile.epc.Backend.Entities.AncienMembre;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_ancien_membre".
*/
public class AncienMembreDao extends AbstractDao<AncienMembre, Long> {

    public static final String TABLENAME = "tbl_ancien_membre";

    /**
     * Properties of entity AncienMembre.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AncienMembreId = new Property(0, Long.class, "ancienMembreId", true, "ancienMembreId");
        public final static Property MenageId = new Property(1, Long.class, "menageId", false, "menageId");
        public final static Property LogeId = new Property(2, Long.class, "logeId", false, "logeId");
        public final static Property BatimentId = new Property(3, Long.class, "batimentId", false, "batimentId");
        public final static Property SdeId = new Property(4, String.class, "sdeId", false, "sdeId");
        public final static Property Q1Ordre = new Property(5, Short.class, "q1Ordre", false, "q1Ordre");
        public final static Property Q2Prenom = new Property(6, String.class, "q2Prenom", false, "q2Prenom");
        public final static Property Q3Nom = new Property(7, String.class, "q3Nom", false, "q3Nom");
        public final static Property Q4Sexe = new Property(8, Short.class, "q4Sexe", false, "q4Sexe");
        public final static Property Q5Statut = new Property(9, Short.class, "q5Statut", false, "q5Statut");
        public final static Property Q6EtaitMembreMenage = new Property(10, Short.class, "q6EtaitMembreMenage", false, "q6EtaitMembreMenage");
        public final static Property Q7DateQuitterMenageJour = new Property(11, Short.class, "q7DateQuitterMenageJour", false, "q7DateQuitterMenageJour");
        public final static Property QADateQuitterMenageMois = new Property(12, Short.class, "qADateQuitterMenageMois", false, "qADateQuitterMenageMois");
        public final static Property QADateQuitterMenageAnnee = new Property(13, String.class, "qADateQuitterMenageAnnee", false, "qADateQuitterMenageAnnee");
        public final static Property Q8DateNaissanceJour = new Property(14, Short.class, "q8DateNaissanceJour", false, "q8DateNaissanceJour");
        public final static Property Q8DateNaissanceMois = new Property(15, Short.class, "q8DateNaissanceMois", false, "q8DateNaissanceMois");
        public final static Property Q8DateNaissanceAnnee = new Property(16, String.class, "q8DateNaissanceAnnee", false, "q8DateNaissanceAnnee");
        public final static Property Q9Age = new Property(17, Integer.class, "q9Age", false, "q9Age");
        public final static Property Q10RelationAvecChefMenage = new Property(18, Short.class, "q10RelationAvecChefMenage", false, "q10RelationAvecChefMenage");
        public final static Property Q11Nationalite = new Property(19, Short.class, "q11Nationalite", false, "q11Nationalite");
        public final static Property Q11PaysNationalite = new Property(20, String.class, "q11PaysNationalite", false, "q11PaysNationalite");
        public final static Property Q12NiveauAcademique = new Property(21, Short.class, "q12NiveauAcademique", false, "q12NiveauAcademique");
        public final static Property Q13StatutMatrimonial = new Property(22, Short.class, "q13StatutMatrimonial", false, "q13StatutMatrimonial");
        public final static Property Statut = new Property(23, Short.class, "statut", false, "statut");
        public final static Property IsValidated = new Property(24, Boolean.class, "isValidated", false, "isValidated");
        public final static Property IsFieldAllFilled = new Property(25, Boolean.class, "isFieldAllFilled", false, "isFieldAllFilled");
        public final static Property DateDebutCollecte = new Property(26, String.class, "dateDebutCollecte", false, "dateDebutCollecte");
        public final static Property DateFinCollecte = new Property(27, String.class, "dateFinCollecte", false, "dateFinCollecte");
        public final static Property DureeSaisie = new Property(28, Integer.class, "dureeSaisie", false, "dureeSaisie");
        public final static Property IsContreEnqueteMade = new Property(29, Boolean.class, "isContreEnqueteMade", false, "isContreEnqueteMade");
        public final static Property CodeAgentRecenceur = new Property(30, String.class, "codeAgentRecenceur", false, "codeAgentRecenceur");
    };


    public AncienMembreDao(DaoConfig config) {
        super(config);
    }
    
    public AncienMembreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_ancien_membre\" (" + //
                "\"ancienMembreId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ancienMembreId
                "\"menageId\" INTEGER," + // 1: menageId
                "\"logeId\" INTEGER," + // 2: logeId
                "\"batimentId\" INTEGER," + // 3: batimentId
                "\"sdeId\" TEXT," + // 4: sdeId
                "\"q1Ordre\" INTEGER," + // 5: q1Ordre
                "\"q2Prenom\" TEXT," + // 6: q2Prenom
                "\"q3Nom\" TEXT," + // 7: q3Nom
                "\"q4Sexe\" INTEGER," + // 8: q4Sexe
                "\"q5Statut\" INTEGER," + // 9: q5Statut
                "\"q6EtaitMembreMenage\" INTEGER," + // 10: q6EtaitMembreMenage
                "\"q7DateQuitterMenageJour\" INTEGER," + // 11: q7DateQuitterMenageJour
                "\"qADateQuitterMenageMois\" INTEGER," + // 12: qADateQuitterMenageMois
                "\"qADateQuitterMenageAnnee\" TEXT," + // 13: qADateQuitterMenageAnnee
                "\"q8DateNaissanceJour\" INTEGER," + // 14: q8DateNaissanceJour
                "\"q8DateNaissanceMois\" INTEGER," + // 15: q8DateNaissanceMois
                "\"q8DateNaissanceAnnee\" TEXT," + // 16: q8DateNaissanceAnnee
                "\"q9Age\" INTEGER," + // 17: q9Age
                "\"q10RelationAvecChefMenage\" INTEGER," + // 18: q10RelationAvecChefMenage
                "\"q11Nationalite\" INTEGER," + // 19: q11Nationalite
                "\"q11PaysNationalite\" TEXT," + // 20: q11PaysNationalite
                "\"q12NiveauAcademique\" INTEGER," + // 21: q12NiveauAcademique
                "\"q13StatutMatrimonial\" INTEGER," + // 22: q13StatutMatrimonial
                "\"statut\" INTEGER," + // 23: statut
                "\"isValidated\" INTEGER," + // 24: isValidated
                "\"isFieldAllFilled\" INTEGER," + // 25: isFieldAllFilled
                "\"dateDebutCollecte\" TEXT," + // 26: dateDebutCollecte
                "\"dateFinCollecte\" TEXT," + // 27: dateFinCollecte
                "\"dureeSaisie\" INTEGER," + // 28: dureeSaisie
                "\"isContreEnqueteMade\" INTEGER," + // 29: isContreEnqueteMade
                "\"codeAgentRecenceur\" TEXT);"); // 30: codeAgentRecenceur
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_ancien_membre\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AncienMembre entity) {
        stmt.clearBindings();
 
        Long ancienMembreId = entity.getAncienMembreId();
        if (ancienMembreId != null) {
            stmt.bindLong(1, ancienMembreId);
        }
 
        Long menageId = entity.getMenageId();
        if (menageId != null) {
            stmt.bindLong(2, menageId);
        }
 
        Long logeId = entity.getLogeId();
        if (logeId != null) {
            stmt.bindLong(3, logeId);
        }
 
        Long batimentId = entity.getBatimentId();
        if (batimentId != null) {
            stmt.bindLong(4, batimentId);
        }
 
        String sdeId = entity.getSdeId();
        if (sdeId != null) {
            stmt.bindString(5, sdeId);
        }
 
        Short q1Ordre = entity.getQ1Ordre();
        if (q1Ordre != null) {
            stmt.bindLong(6, q1Ordre);
        }
 
        String q2Prenom = entity.getQ2Prenom();
        if (q2Prenom != null) {
            stmt.bindString(7, q2Prenom);
        }
 
        String q3Nom = entity.getQ3Nom();
        if (q3Nom != null) {
            stmt.bindString(8, q3Nom);
        }
 
        Short q4Sexe = entity.getQ4Sexe();
        if (q4Sexe != null) {
            stmt.bindLong(9, q4Sexe);
        }
 
        Short q5Statut = entity.getQ5Statut();
        if (q5Statut != null) {
            stmt.bindLong(10, q5Statut);
        }
 
        Short q6EtaitMembreMenage = entity.getQ6EtaitMembreMenage();
        if (q6EtaitMembreMenage != null) {
            stmt.bindLong(11, q6EtaitMembreMenage);
        }
 
        Short q7DateQuitterMenageJour = entity.getQ7DateQuitterMenageJour();
        if (q7DateQuitterMenageJour != null) {
            stmt.bindLong(12, q7DateQuitterMenageJour);
        }
 
        Short qADateQuitterMenageMois = entity.getQADateQuitterMenageMois();
        if (qADateQuitterMenageMois != null) {
            stmt.bindLong(13, qADateQuitterMenageMois);
        }
 
        String qADateQuitterMenageAnnee = entity.getQADateQuitterMenageAnnee();
        if (qADateQuitterMenageAnnee != null) {
            stmt.bindString(14, qADateQuitterMenageAnnee);
        }
 
        Short q8DateNaissanceJour = entity.getQ8DateNaissanceJour();
        if (q8DateNaissanceJour != null) {
            stmt.bindLong(15, q8DateNaissanceJour);
        }
 
        Short q8DateNaissanceMois = entity.getQ8DateNaissanceMois();
        if (q8DateNaissanceMois != null) {
            stmt.bindLong(16, q8DateNaissanceMois);
        }
 
        String q8DateNaissanceAnnee = entity.getQ8DateNaissanceAnnee();
        if (q8DateNaissanceAnnee != null) {
            stmt.bindString(17, q8DateNaissanceAnnee);
        }
 
        Integer q9Age = entity.getQ9Age();
        if (q9Age != null) {
            stmt.bindLong(18, q9Age);
        }
 
        Short q10RelationAvecChefMenage = entity.getQ10RelationAvecChefMenage();
        if (q10RelationAvecChefMenage != null) {
            stmt.bindLong(19, q10RelationAvecChefMenage);
        }
 
        Short q11Nationalite = entity.getQ11Nationalite();
        if (q11Nationalite != null) {
            stmt.bindLong(20, q11Nationalite);
        }
 
        String q11PaysNationalite = entity.getQ11PaysNationalite();
        if (q11PaysNationalite != null) {
            stmt.bindString(21, q11PaysNationalite);
        }
 
        Short q12NiveauAcademique = entity.getQ12NiveauAcademique();
        if (q12NiveauAcademique != null) {
            stmt.bindLong(22, q12NiveauAcademique);
        }
 
        Short q13StatutMatrimonial = entity.getQ13StatutMatrimonial();
        if (q13StatutMatrimonial != null) {
            stmt.bindLong(23, q13StatutMatrimonial);
        }
 
        Short statut = entity.getStatut();
        if (statut != null) {
            stmt.bindLong(24, statut);
        }
 
        Boolean isValidated = entity.getIsValidated();
        if (isValidated != null) {
            stmt.bindLong(25, isValidated ? 1L: 0L);
        }
 
        Boolean isFieldAllFilled = entity.getIsFieldAllFilled();
        if (isFieldAllFilled != null) {
            stmt.bindLong(26, isFieldAllFilled ? 1L: 0L);
        }
 
        String dateDebutCollecte = entity.getDateDebutCollecte();
        if (dateDebutCollecte != null) {
            stmt.bindString(27, dateDebutCollecte);
        }
 
        String dateFinCollecte = entity.getDateFinCollecte();
        if (dateFinCollecte != null) {
            stmt.bindString(28, dateFinCollecte);
        }
 
        Integer dureeSaisie = entity.getDureeSaisie();
        if (dureeSaisie != null) {
            stmt.bindLong(29, dureeSaisie);
        }
 
        Boolean isContreEnqueteMade = entity.getIsContreEnqueteMade();
        if (isContreEnqueteMade != null) {
            stmt.bindLong(30, isContreEnqueteMade ? 1L: 0L);
        }
 
        String codeAgentRecenceur = entity.getCodeAgentRecenceur();
        if (codeAgentRecenceur != null) {
            stmt.bindString(31, codeAgentRecenceur);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AncienMembre readEntity(Cursor cursor, int offset) {
        AncienMembre entity = new AncienMembre( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ancienMembreId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // menageId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // logeId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // batimentId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sdeId
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5), // q1Ordre
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // q2Prenom
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // q3Nom
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8), // q4Sexe
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9), // q5Statut
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10), // q6EtaitMembreMenage
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11), // q7DateQuitterMenageJour
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12), // qADateQuitterMenageMois
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // qADateQuitterMenageAnnee
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14), // q8DateNaissanceJour
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15), // q8DateNaissanceMois
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // q8DateNaissanceAnnee
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // q9Age
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18), // q10RelationAvecChefMenage
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19), // q11Nationalite
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // q11PaysNationalite
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21), // q12NiveauAcademique
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22), // q13StatutMatrimonial
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23), // statut
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0, // isValidated
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0, // isFieldAllFilled
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // dateDebutCollecte
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // dateFinCollecte
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // dureeSaisie
            cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0, // isContreEnqueteMade
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30) // codeAgentRecenceur
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AncienMembre entity, int offset) {
        entity.setAncienMembreId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMenageId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLogeId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBatimentId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSdeId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQ1Ordre(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
        entity.setQ2Prenom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQ3Nom(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQ4Sexe(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8));
        entity.setQ5Statut(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9));
        entity.setQ6EtaitMembreMenage(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10));
        entity.setQ7DateQuitterMenageJour(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11));
        entity.setQADateQuitterMenageMois(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12));
        entity.setQADateQuitterMenageAnnee(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setQ8DateNaissanceJour(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14));
        entity.setQ8DateNaissanceMois(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15));
        entity.setQ8DateNaissanceAnnee(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setQ9Age(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setQ10RelationAvecChefMenage(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18));
        entity.setQ11Nationalite(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19));
        entity.setQ11PaysNationalite(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setQ12NiveauAcademique(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21));
        entity.setQ13StatutMatrimonial(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22));
        entity.setStatut(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23));
        entity.setIsValidated(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0);
        entity.setIsFieldAllFilled(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
        entity.setDateDebutCollecte(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setDateFinCollecte(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setDureeSaisie(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setIsContreEnqueteMade(cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0);
        entity.setCodeAgentRecenceur(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AncienMembre entity, long rowId) {
        entity.setAncienMembreId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AncienMembre entity) {
        if(entity != null) {
            return entity.getAncienMembreId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
